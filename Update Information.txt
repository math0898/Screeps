------ Update 1.1.4 ------ Optimization 1 ------
Goal: Reduce accesses to the entire creeps list

Completed Tasks:
---> Optimizations:
     Removed O(9n) to be replaced with O(n * t) -> O(r * n * t).
---> -25 Lines... doesn't mean much but hey
---> Running Creep AI now also counts them.
---> New function resetCreepCounts(room) resets creep counts in the room.
---> New constant now holds players who are considered allies.
---> Changed build in room memory to exclude non-extensions bellow controller level
     3 which should allow for faster early game progression.
---> Removed random runWithCitadel(room) call in era2 logic.

Additional TODO's:
---> Add basic scouting Mechanics.
---> Add automatic additional room taking.
---> Reimplement distance harvesters.
---> Check if more workers can be spawned.
---> Check if a helper carrier can move resources to a nearby ally.
---> Give carriers more idle options.
---> Implement a method to build road network outside of the "core".
---> Add spawn "core" is centered on to memory so it doesn't need to be searched
     for every tick. This can also be checked as a shortcut when searching for
     controlled rooms.
---> Check citadel building priorities, tower > extensions > roads > walls
---> Finish hardcoding the citadel structures
---> Implement a strategy to choose "core" structure in a room.

Performance Change:
---> (CPU Usage) (5.141) -> (4.200) avg. over the first 20,000 ticks
---> (Peak CPU) (31.240) -> (30.522) over the first 20,000 ticks
---> (Controller lvl) (2:[35,547] - 79%) -> (3:[1,689] - 1%) in 20,000 ticks
---> (Mined Resources) (458,432) -> (441,098) resources mined
---> (Wasted Resources) ([126,964] - 28%) -> ([158,993] - 36%) of mined resources unused


------ Update 1.1.3 ------ Stable Workers ------
Goal: Make workers stable, and fix CPU spike at Era 2

Completed Tasks:
---> MAJOR CPU Optimization, citadels are no longer constructed every tick, now just when
     construction sites are less than 100, and try's just what needs to be added next.
---> +84 lines... doesn't mean much but hey
---> Implemented room build target which should prioritize tower > extension > road > wall and then progress.
---> Worker now takes it's build target from room memory rather than its own search algorithm.
---> logc.era.js now checks whether to run near future logic with construction or not.
---> main.js now uses this (^) to run logic, or logic with citadel.
---> Added some new performance calculations
---> Changed how citadel construction sites are added.

Additional TODO's:
---> Add basic scouting Mechanics.
---> Add automatic additional room taking.
---> Reimplement distance harvesters.
---> Check if more workers can be spawned.
---> Prevent the 1 tick loss when controller upgrades since era isn't updated.
---> Add a 'constant' in the code containing allies.

Performance Change:
---> (CPU Usage) (18.815) -> (5.141) avg. over the first 20,000 ticks
---> (Peak CPU) Previously untested -> (31.240) over the first 20,000 ticks
---> (Controller lvl) (2:[33,703] - 75%) -> (2:[35,547] - 79%) in 20,000 ticks
---> (Mined Resources) Previously untested -> (458,432) resources mined
---> (Wasted Resources) Previously untested -> ([126,964] - 28%) of mined resources unused


------ Update 1.1.2 ------ Controlled Rooms ------
Goal: Have an array that better describes the rooms I control.

Completed Tasks:
---> Added initializeControlledRooms() to main.js which handles the controlled rooms array. O(r * t)
---> Implemented some basic logic to run initializeControlledRooms on occasion and start.
---> Removed unnecessary variables.
---> Made data collection feel less tagged on... even though it still is.
---> Removed some currently unused code.
---> Created a droppedEnergy in room memory which points to the largest pile.
---> Now creeps use the droppedEnergy in room memory and don't do their own search.
     Creeps should be more stable and use less CPU.

Additional TODO's:
---> (IMPORTANT) Investigate the large increase in CPU usage once Era 2 is hit.
---> Add basic scouting Mechanics.
---> Add automatic additional room taking.
---> Make worker building stable. No more random movements.
---> Reimplement distance harvesters.
---> Check if more workers can be spawned.

Performance Change:
---> (CPU Usage) (18.98) -> (18.815) avg. over the first 20,000 ticks
---> (Controller lvl) (2:[25,707] - 57%) -> (2:[33,703] - 75%) in 20,000 ticks


------ Update 1.1.1 ------ Capacity Based Spawning ------
Goal: Change Spawning to work on max capacity rather than controller level.

Completed Tasks:
---> Two optimizations, spawnMiner(capacity, spawn) down from O(t) to O(c), spawn(currentRoom) down from O(s * n * t) to O(s + t).
---> (-20) Lines of code... doesn't mean much but hey.
---> spawn{#Role} functions have been updated and signature changed to match the style of spawning based on capacity as apposed to the era currently present.
---> Made a small notational difference, counts of creeps of each role now stored at room.memory.count.{#Role} instead of room.memory.count{#Role}.
---> Change should be functional and reflected in an overall performance boost.
---> Left 2 TODO:'s
     ---> TOOD: Check if more Workers can be spawned.
     ---> TODO: Reimplement Distance Harvesters.

Additional TODO's:
---> (IMPORTANT) Investigate the large increase in CPU usage once Era 2 is hit.
---> Optimize creeps searching for dropped resources.
---> Add basic scouting Mechanics.
---> Add automatic additional room taking.

Performance Change:
---> (CPU Usage) Previously untested -> (18.98) avg. over the first 20,000 ticks
---> (Controller lvl) Previously untested -> (2:[25,707] - 57%) in 20,000 ticks
